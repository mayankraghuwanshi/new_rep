{"version":3,"sources":["visualizorComponent/Visualizor.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","backgroundImage","height","margin","Visualizor","props","state","arr","active","SPEED","SIZE","this","resetArray","size","i","push","Math","floor","random","setState","objArr","slice","length","j","case","start","end","barOneHeight","barTwoHeight","temp","console","log","barArr","document","getElementsByClassName","bubbleSort","obj","setTimeout","startIdx","endIdx","barOneStyle","style","barTwoStyle","backgroundColor","e","target","id","value","BOX_SIZE","width","className","type","onClick","sortHelper","min","max","onChange","onSlideHandler","map","item","index","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b7010535.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Visualizer.css';\r\n\r\n\r\n// const SPEED = 1;\r\n// const BOX_SIZE=15;\r\n// const SIZE=100;\r\nconst COMPARE_COLOR = \"red\";\r\nconst SORTED_COLOR=\"green\";\r\nconst SWAP_COLOR=\"yellow\";\r\nconst PREVIOUS_COLOR=\"#0074D9\"\r\nconst NEW_COLOR=\"#00d999\";\r\nconst headerStyle = {\r\n    backgroundImage: \"linear-gradient(rgb(31, 175, 132),rgb(0, 217, 153))\",\r\n    height : \"40px\",\r\n    margin : \"auto\"\r\n\r\n}\r\nclass Visualizor extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            arr : [],\r\n            active : false,\r\n            SPEED: 10,\r\n            SIZE : 60,\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n    \r\n    resetArray(){\r\n        const size=this.state.SIZE\r\n        const min=15;\r\n        const max=500;\r\n        const arr = [];\r\n        for(let i=0;i<size;i++){\r\n            arr.push(Math.floor(Math.random() * (max - min + 1) + min))\r\n        }\r\n        this.setState({arr});\r\n    }\r\n\r\n    bubbleSort(){\r\n        const objArr = []\r\n        let arr = this.state.arr.slice();\r\n        for(let i=0;i<arr.length;i++){\r\n            for(let j=i+1;j<arr.length;j++){\r\n                objArr.push({case : 1,start : i,end : j})\r\n                if(arr[i]<arr[j]){\r\n                    objArr.push({case : 2 , start : i , end : j , barOneHeight : `${arr[j]}px`,barTwoHeight : `${arr[i]}px`})\r\n                    const temp = arr[i];\r\n                    arr[i]=arr[j];\r\n                    arr[j]=temp;\r\n                }else {\r\n                    objArr.push({case: 3, start: i, end: j})\r\n                }\r\n                objArr.push({case: 5, start: i, end: j})\r\n            }\r\n            objArr.push({case : 4,start : i})\r\n        }\r\n        return objArr;\r\n    }\r\n\r\n    sortHelper(){\r\n        const SPEED = this.state.SPEED**2/this.state.SIZE;\r\n        // this.setState({active : true})\r\n        console.log(\"before loop\")\r\n        const barArr = document.getElementsByClassName(\"array-bars\");\r\n        const arr=this.bubbleSort()\r\n        // console.table(arr)\r\n        for(let i=0;i<arr.length;i++){\r\n            const obj = arr[i];\r\n            switch (obj.case) {\r\n                //just compare.\r\n                case 1 : setTimeout(()=>{\r\n                    const startIdx = obj.start\r\n                    const endIdx = obj.end\r\n                    const barOneStyle = barArr[startIdx].style;\r\n                    const barTwoStyle = barArr[endIdx].style;\r\n                    barOneStyle.backgroundColor=COMPARE_COLOR;\r\n                    barTwoStyle.backgroundColor=COMPARE_COLOR;\r\n                },i*SPEED)\r\n                    break;\r\n                //swap\r\n                case 2 : setTimeout(()=>{\r\n                    const startIdx = obj.start\r\n                    const endIdx = obj.end\r\n                    const barOneStyle = barArr[startIdx].style;\r\n                    const barTwoStyle = barArr[endIdx].style;\r\n                    barOneStyle.backgroundColor=SWAP_COLOR;\r\n                    barTwoStyle.backgroundColor=SWAP_COLOR;\r\n                    barOneStyle.height=obj.barOneHeight;\r\n                    barTwoStyle.height=obj.barTwoHeight;\r\n                },i*SPEED)\r\n                    break;\r\n                //if are alredy sorted.\r\n                case 3 : setTimeout(()=>{\r\n                    const startIdx = obj.start\r\n                    const endIdx = obj.end\r\n                    const barOneStyle = barArr[startIdx].style;\r\n                    const barTwoStyle = barArr[endIdx].style;\r\n                    barOneStyle.backgroundColor=SORTED_COLOR;\r\n                    barTwoStyle.backgroundColor=SORTED_COLOR;\r\n                },i*SPEED)\r\n                    break;\r\n                //color sorted bars.\r\n                case 4 : setTimeout(()=>{\r\n                    const startIdx = obj.start;\r\n                    const barOneStyle = barArr[startIdx].style;\r\n                    barOneStyle.backgroundColor=NEW_COLOR;\r\n                },i*SPEED)\r\n                    break;\r\n                case 5: setTimeout(()=>{\r\n                    const startIdx = obj.start\r\n                    const endIdx = obj.end\r\n                    const barOneStyle = barArr[startIdx].style;\r\n                    const barTwoStyle = barArr[endIdx].style;\r\n                    barOneStyle.backgroundColor=PREVIOUS_COLOR;\r\n                    barTwoStyle.backgroundColor=PREVIOUS_COLOR;\r\n                },i*SPEED)\r\n                    break;\r\n                default : console.log(\"Something weng wrong!\");\r\n            }\r\n        }\r\n        console.log(\"after loop\")\r\n    }\r\n    onChangeHandler(e){\r\n        switch (e.target.id) {\r\n            case \"SPEED\": this.setState({SPEED : e.target.value});\r\n                break;\r\n            case \"SIZE\" : this.setState({SIZE : e.target.value});\r\n                this.resetArray()\r\n                break;\r\n            default : break;\r\n        }\r\n    }\r\n    onSlideHandler(e){\r\n        this.setState({SIZE : e.target.value});\r\n        this.resetArray()\r\n    }\r\n\r\n    render() {\r\n        const arr = this.state.arr;\r\n        const active = this.state.active;\r\n        const SPEED = this.state.SPEED;\r\n        const SIZE = this.state.SIZE;\r\n        const BOX_SIZE = Math.floor(700/SIZE);\r\n        return (\r\n            <div>\r\n                <div style={headerStyle}>\r\n                    <div style={{width : \"500px\" , margin : \"auto\"}}>\r\n                    <input className={\"button\"}\r\n                           type=\"button\"\r\n                           value={\"Reset\"}\r\n                           onClick={()=>this.resetArray()}\r\n                    />\r\n                    <input className={\"button\"}\r\n                           type={\"button\"}\r\n                           onClick={()=>this.sortHelper()}\r\n                           value={\"Bubble Sort\"}\r\n                    />\r\n                    <input className=\"slider\" type={\"range\"} value={this.state.SIZE} min = \"20\" max = \"100\" onChange={(e)=>this.onSlideHandler(e)}/>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"array-container\"\r\n                     style={{width : `${(BOX_SIZE+2)*SIZE}px`}}>\r\n                    {arr.map((item , index)=>(\r\n                         <div key={index}\r\n                              className=\"array-bars\"\r\n                              style={{height : `${item}px` ,width : `${BOX_SIZE}px`}}>\r\n                             </div>))}\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Visualizor;","import React from 'react';\nimport './App.css';\nimport Visualizor from \"./visualizorComponent/Visualizor\";\nfunction App() {\n\n    return <div className={\"App\"}>\n        <Visualizor/>\n    </div>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// darkslateblue\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}